{"version":3,"sources":["lib/redux.js","components/Task.js","components/TaskList.js","components/InboxScreen.js","App.js","reportWebVitals.js","index.js"],"names":["actions","taskStateReducer","taskState","state","action","tasks","map","task","id","createStore","type","title","Task","onArchiveTask","onPinTask","className","defaultChecked","disabled","name","onClick","value","readOnly","placeholder","event","stopPropagation","TaskList","loading","events","LoadingRow","length","tasksInOrder","filter","t","key","defaultProps","connect","dispatch","archiveTask","pinTask","InboxScreen","error","App","store","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAKaA,EACG,eADHA,EAED,WAQZ,SAASC,EAAiBC,GACxB,OAAO,SAACC,EAAOC,GACb,OAAO,2BACFD,GADL,IAEEE,MAAOF,EAAME,MAAMC,KAAI,SAAAC,GAAI,OACzBA,EAAKC,KAAOJ,EAAOI,GAAnB,2BAA6BD,GAA7B,IAAmCJ,MAAOD,IAAcK,QAOzD,IAqBQE,eArBQ,SAACN,EAAOC,GAC7B,OAAQA,EAAOM,MACb,KAAKV,EACH,OAAOC,EAAiB,gBAAjBA,CAAkCE,EAAOC,GAClD,KAAKJ,EACH,OAAOC,EAAiB,cAAjBA,CAAgCE,EAAOC,GAChD,QACE,OAAOD,KAcuB,CAAEE,MARjB,CACnB,CAAEG,GAAI,IAAKG,MAAO,YAAaR,MAAO,cACtC,CAAEK,GAAI,IAAKG,MAAO,iBAAkBR,MAAO,cAC3C,CAAEK,GAAI,IAAKG,MAAO,iBAAkBR,MAAO,cAC3C,CAAEK,GAAI,IAAKG,MAAO,kBAAmBR,MAAO,iB,OCzC/B,SAASS,EAAT,GAAyE,IAAD,IAAxDL,KAAQC,EAAgD,EAAhDA,GAAIG,EAA4C,EAA5CA,MAAOR,EAAqC,EAArCA,MAASU,EAA4B,EAA5BA,cAAeC,EAAa,EAAbA,UACxE,OACE,yBAAKC,UAAS,oBAAeZ,IAC3B,2BAAOY,UAAU,YACf,2BACEL,KAAK,WACLM,eAA0B,kBAAVb,EAChBc,UAAU,EACVC,KAAK,YAEP,0BAAMH,UAAU,kBAAkBI,QAAS,kBAAMN,EAAcL,OAEjE,yBAAKO,UAAU,SACb,2BAAOL,KAAK,OAAOU,MAAOT,EAAOU,UAAU,EAAMC,YAAY,iBAG/D,yBAAKP,UAAU,UAAUI,QAAS,SAAAI,GAAK,OAAIA,EAAMC,oBACpC,kBAAVrB,GAEC,uBAAGgB,QAAS,kBAAML,EAAUN,KAC1B,0BAAMO,UAAS,iBCjBpB,IAAMU,EAAW,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,QAASrB,EAAsC,EAAtCA,MAC5BsB,EAAS,CACbb,UAFsE,EAA/BA,UAGvCD,cAHsE,EAApBA,eAM9Ce,EACJ,yBAAKb,UAAU,gBACb,0BAAMA,UAAU,kBAChB,0BAAMA,UAAU,aACd,yCADF,IACuB,sCADvB,IACyC,yCAI7C,GAAIW,EACF,OACE,yBAAKX,UAAU,cACZa,EACAA,EACAA,EACAA,EACAA,EACAA,GAIP,GAAqB,IAAjBvB,EAAMwB,OACR,OACE,yBAAKd,UAAU,cACb,yBAAKA,UAAU,mBACb,0BAAMA,UAAU,eAChB,yBAAKA,UAAU,iBAAf,qBACA,yBAAKA,UAAU,oBAAf,wBAKR,IAAMe,EAAY,sBACbzB,EAAM0B,QAAO,SAAAC,GAAC,MAAgB,gBAAZA,EAAE7B,UADP,YAEbE,EAAM0B,QAAO,SAAAC,GAAC,MAAgB,gBAAZA,EAAE7B,WAEzB,OACE,yBAAKY,UAAU,cACZe,EAAaxB,KAAI,SAAAC,GAAI,OACpB,kBAACK,EAAD,eAAMqB,IAAK1B,EAAKC,GAAID,KAAMA,GAAUoB,SAgB5CF,EAASS,aAAe,CACtBR,SAAS,GAGIS,mBACb,kBAAgB,CACd9B,MADF,EAAGA,MACY0B,QAAO,SAAAC,GAAC,MAAgB,eAAZA,EAAE7B,OAAsC,gBAAZ6B,EAAE7B,aAEzD,SAAAiC,GAAQ,MAAK,CACXvB,cAAe,SAAAL,GAAE,OAAI4B,EFhEE,SAAA5B,GAAE,MAAK,CAAEE,KAAMV,EAAsBQ,MEgE9B6B,CAAY7B,KAC1CM,UAAW,SAAAN,GAAE,OAAI4B,EFhEE,SAAA5B,GAAE,MAAK,CAAEE,KAAMV,EAAkBQ,MEgE1B8B,CAAQ9B,QANvB2B,CAQbV,GCxEWc,EAAc,SAAC,GAC1B,OADwC,EAAZC,MAGxB,yBAAKzB,UAAU,mBACb,yBAAKA,UAAU,mBACb,0BAAMA,UAAU,kBAChB,yBAAKA,UAAU,iBAAf,UACA,yBAAKA,UAAU,oBAAf,0BAON,yBAAKA,UAAU,mBACb,6BACE,wBAAIA,UAAU,cACZ,0BAAMA,UAAU,iBAAhB,aAGJ,kBAAC,EAAD,QAUNwB,EAAYL,aAAe,CACzBM,MAAO,MAGML,mBAAQ,kBAAgB,CAAEK,MAAlB,EAAGA,SAAXL,CAAoCI,GC1BpCE,MAPf,WACE,OACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,QCESC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7a83a8d4.chunk.js","sourcesContent":["// A simple redux store/actions/reducer implementation.\n// A true app would be more complex and separated into different files.\nimport { createStore } from 'redux';\n\n// The actions are the \"names\" of the changes that can happen to the store\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n};\n\n// The action creators bundle actions with the data required to execute them\nexport const archiveTask = id => ({ type: actions.ARCHIVE_TASK, id });\nexport const pinTask = id => ({ type: actions.PIN_TASK, id });\n\n// All our reducers simply change the state of a single task.\nfunction taskStateReducer(taskState) {\n  return (state, action) => {\n    return {\n      ...state,\n      tasks: state.tasks.map(task =>\n        task.id === action.id ? { ...task, state: taskState } : task\n      ),\n    };\n  };\n}\n\n// The reducer describes how the contents of the store change for each action\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case actions.ARCHIVE_TASK:\n      return taskStateReducer('TASK_ARCHIVED')(state, action);\n    case actions.PIN_TASK:\n      return taskStateReducer('TASK_PINNED')(state, action);\n    default:\n      return state;\n  }\n};\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n];\n\n// We export the constructed redux store\nexport default createStore(reducer, { tasks: defaultTasks });\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Task({ task: { id, title, state }, onArchiveTask, onPinTask }) {\n  return (\n    <div className={`list-item ${state}`}>\n      <label className=\"checkbox\">\n        <input\n          type=\"checkbox\"\n          defaultChecked={state === 'TASK_ARCHIVED'}\n          disabled={true}\n          name=\"checked\"\n        />\n        <span className=\"checkbox-custom\" onClick={() => onArchiveTask(id)} />\n      </label>\n      <div className=\"title\">\n        <input type=\"text\" value={title} readOnly={true} placeholder=\"Input title\" />\n      </div>\n\n      <div className=\"actions\" onClick={event => event.stopPropagation()}>\n        {state !== 'TASK_ARCHIVED' && (\n          // eslint-disable-next-line jsx-a11y/anchor-is-valid\n          <a onClick={() => onPinTask(id)}>\n            <span className={`icon-star`} />\n          </a>\n        )}\n      </div>\n    </div>\n  );\n}\n\nTask.propTypes = {\n  /** Composition of the task */\n  task: PropTypes.shape({\n    /** Id of the task */\n    id: PropTypes.string.isRequired,\n    /** Title of the task */\n    title: PropTypes.string.isRequired,\n    /** Current state of the task */\n    state: PropTypes.string.isRequired,\n  }),\n  /** Event to change the task to archived */\n  onArchiveTask: PropTypes.func,\n  /** Event to change the task to pinned */\n  onPinTask: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { archiveTask, pinTask } from '../lib/redux';\nimport Task from './Task';\n\nexport const TaskList = ({ loading, tasks, onPinTask, onArchiveTask }) => {\n  const events = {\n    onPinTask,\n    onArchiveTask,\n  };\n\n  const LoadingRow = (\n    <div className=\"loading-item\">\n      <span className=\"glow-checkbox\" />\n      <span className=\"glow-text\">\n        <span>Loading</span> <span>cool</span> <span>state</span>\n      </span>\n    </div>\n  );\n  if (loading) {\n    return (\n      <div className=\"list-items\">\n        {LoadingRow}\n        {LoadingRow}\n        {LoadingRow}\n        {LoadingRow}\n        {LoadingRow}\n        {LoadingRow}\n      </div>\n    );\n  }\n  if (tasks.length === 0) {\n    return (\n      <div className=\"list-items\">\n        <div className=\"wrapper-message\">\n          <span className=\"icon-check\" />\n          <div className=\"title-message\">You have no tasks</div>\n          <div className=\"subtitle-message\">Sit back and relax</div>\n        </div>\n      </div>\n    );\n  }\n  const tasksInOrder = [\n    ...tasks.filter(t => t.state === 'TASK_PINNED'),\n    ...tasks.filter(t => t.state !== 'TASK_PINNED'),\n  ];\n  return (\n    <div className=\"list-items\">\n      {tasksInOrder.map(task => (\n        <Task key={task.id} task={task} {...events} />\n      ))}\n    </div>\n  );\n}\n\nTaskList.propTypes = {\n  /** Checks if it's in loading state */\n  loading: PropTypes.bool,\n  /** The list of tasks */\n  tasks: PropTypes.arrayOf(Task.propTypes.task).isRequired,\n  /** Event to change the task to pinned */\n  onPinTask: PropTypes.func,\n  /** Event to change the task to archived */\n  onArchiveTask: PropTypes.func,\n};\nTaskList.defaultProps = {\n  loading: false,\n};\n\nexport default connect(\n  ({ tasks }) => ({\n    tasks: tasks.filter(t => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'),\n  }),\n  dispatch => ({\n    onArchiveTask: id => dispatch(archiveTask(id)),\n    onPinTask: id => dispatch(pinTask(id)),\n  })\n)(TaskList);\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TaskList from './TaskList';\n\nexport const InboxScreen = ({ error }) => {\n  if (error) {\n    return (\n      <div className=\"page lists-show\">\n        <div className=\"wrapper-message\">\n          <span className=\"icon-face-sad\" />\n          <div className=\"title-message\">Oh no!</div>\n          <div className=\"subtitle-message\">Something went wrong</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"page lists-show\">\n      <nav>\n        <h1 className=\"title-page\">\n          <span className=\"title-wrapper\">Taskbox</span>\n        </h1>\n      </nav>\n      <TaskList />\n    </div>\n  );\n}\n\nInboxScreen.propTypes = {\n  /** The error message */\n  error: PropTypes.string,\n};\n\nInboxScreen.defaultProps = {\n  error: null,\n};\n\nexport default connect(({ error }) => ({ error }))(InboxScreen);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './lib/redux';\n\nimport InboxScreen from './components/InboxScreen';\n\nimport './index.css';\nfunction App() {\n  return (\n    <Provider store={store}>\n      <InboxScreen />\n    </Provider>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}